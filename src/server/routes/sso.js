/*
 * Copyright 2021-2022 Inclusive Design Research Centre, OCAD University
 * All rights reserved.
 *
 * Handles endpoints:
 * /sso/
 * /sso/google - trigger SSO for Google OAuth2 provider
 * /sso/google/login/callback - handle OAuth2 callback from Google
 *
 * Licensed under the New BSD license. You may not use this file except in
 * compliance with this License.
 *
 * You may obtain a copy of the License at
 * https://github.com/fluid-project/personal-data-server/blob/main/LICENSE
 */

"use strict";

const express = require("express");
const path = require("path");
const ssoDbOps = require("../ssoDbOps.js");
const googleSso = require("./ssoProviders/googleSso.js");
const utils = require("../../shared/utils.js");
const config = utils.loadConfig(path.join(__dirname, "../../../config.json5"));

const router = express.Router();

/**
 * Trigger the single sign on workflow where Google is the OAuth2 provider.
 */
router.get("/", function (req, res) {
    res.render("index", {
        title: "Personal Data Server",
        message: "This paragraph intentionally left blank."
    });
});


/**
 * Trigger the single sign on workflow where Google is the OAuth2 provider.
 */
router.get("/google", async function (req, res) {
    let refererOrigin, refererUrl;
    const ssoState = utils.generateRandomToken(12);

    // Keep track of referer origin and url if it exists and not intiated by the Personal Data Server
    // own website.
    if (req.headers.referer) {
        refererUrl = new URL(req.headers.referer);
        refererOrigin = refererUrl.origin;
    }

    // Keep track of the sso state and its corresponding referer origin/url if exists
    await ssoDbOps.trackSsoState(ssoState,
        refererOrigin && refererOrigin !== config.server.selfDomain ? refererOrigin : null,
        refererOrigin && refererOrigin !== config.server.selfDomain ? refererUrl : null
    );

    // Redirects to Google's `/authorize` endpoint
    googleSso.authorize(res, ssoDbOps, googleSso.options, ssoState)
        .then(null, (error) => {
            console.log(error);
            res.status(403).json({"isError": true, "message": error.message});
        });
});

/**
 * Handle the OAuth2 redirect callback from Google.
 */
router.get("/google/login/callback", async function (req, res) {
    if (req.query.error) {
        res.status(403).json({"isError": true, "message": "The user does not approve the request. Error: " + req.query.error});
        return;
    }
    if (!req.query.code) {
        res.status(403).json({"isError": true, "message": "Request missing authorization code"});
        return;
    }

    const ssoState = req.query.state;

    // Find if the sso state value was generated by our server
    const ssoStateRecord = await ssoDbOps.getSsoState(ssoState);
    // Clean up the sso state record since it's for one time use
    await ssoDbOps.deleteSsoState(ssoState);

    if (!ssoStateRecord) {
        const msg = "Wrong anti-forgery parameter";
        console.log(msg + ": The state value \"" + ssoState + "\" is not found in sso_state_tracker");
        res.status(403).json({"isError": true, "message": msg});
        return;
    }

    // Anti-forgery check passed -- handle the callback from Google.
    googleSso.handleCallback(req, ssoDbOps, googleSso.options).then(async (accessTokenRecord) => {
        // Find the referer origin where the SSO sign on request is from
        if (ssoStateRecord && ssoStateRecord.referer_origin) {
            // This is a sign on process instantiated by an external website.
            // Generate a login token then redirect back to the external website with the login token
            // as a cookie value in the http header.
            const loginToken = utils.generateRandomToken(128);
            const expiryTimestamp = utils.calculateExpiredInTimestamp(config.server.loginTokenExpiresIn);

            // Save the login token into the database
            let loginTokenRecord = await ssoDbOps.getLoginToken(accessTokenRecord.sso_user_account_id, ssoStateRecord.referer_origin);
            if (loginTokenRecord) {
                loginTokenRecord = await ssoDbOps.updateLoginToken(accessTokenRecord.sso_user_account_id, ssoStateRecord.referer_origin, loginToken, expiryTimestamp);
            } else {
                loginTokenRecord = await ssoDbOps.createLoginToken(accessTokenRecord.sso_user_account_id, ssoStateRecord.referer_origin, loginToken, expiryTimestamp);
            }

            // Re-direct back to the referer origin with a cookie expiration defined in
            // googleSso.options.loginTokenExpiresIn
            res.cookie("loginToken", loginToken, { maxAge: config.server.loginTokenExpiresIn * 1000 });
            res.redirect(302, ssoStateRecord.referer_url);
        } else {
            // This is a sign on process instantiated on the Personal Data Server website.
            // Return the access token from Google.
            res.json({"accessToken": JSON.stringify(accessTokenRecord.access_token, null, 2)});
        }
    }).catch((error) => {
        res.status(403).json({"isError": true, "message": error.message});
    });
});

module.exports = router;
